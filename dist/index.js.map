{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\ninterface IOptions {\r\n\tisValueObj?: boolean;\r\n\tparseFn?: (value: any) => any;\r\n}\r\n\r\nconst usePureQueryCustomState = <T>(keyName: string, defaultValue: any, options: IOptions = {}) => {\r\n\tconst [isInit, setInit] = useState(false);\r\n\tconst [urlValue, setUrlValue] = useState(defaultValue);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fn = (e?: any, mount?: boolean) => {\r\n\t\t\t// skip other hooks events\r\n\t\t\tif (e && e.detail.key !== keyName) return;\r\n\t\t\tif (mount) {\r\n\t\t\t\tconst url = new URL(window.location.href);\r\n\t\t\t\tconst params = new URLSearchParams(url.search);\r\n\t\t\t\tconst urlValueParam = params.get(keyName);\r\n\t\t\t\tlet value: any = urlValueParam;\r\n\t\t\t\tif (value && options.isValueObj) {\r\n\t\t\t\t\tvalue = JSON.parse(value);\r\n\t\t\t\t} else if (value && options.parseFn) {\r\n\t\t\t\t\tvalue = options.parseFn(value);\r\n\t\t\t\t} else if (!value) {\r\n\t\t\t\t\tvalue = defaultValue;\r\n\t\t\t\t\t// eslint-disable-next-line no-restricted-globals\r\n\t\t\t\t} else if (!isNaN(value)) {\r\n\t\t\t\t\t// parse string to number\r\n\t\t\t\t\tvalue = Number(value);\r\n\t\t\t\t}\r\n\t\t\t\tsetUrlValue(value);\r\n\t\t\t\tsetInit(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (e.detail.value !== urlValue) setUrlValue(e.detail.value);\r\n\t\t};\r\n\t\tfn({ detail: { key: keyName } }, true); // call it on mount\r\n\t\twindow.addEventListener('popstate', fn);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('popstate', fn);\r\n\t\t};\r\n\t}, []);\r\n\r\n\tconst onValueChange = (newValue: any) => {\r\n\t\tconst plainValue = options.isValueObj\r\n\t\t\t? (JSON.stringify(newValue))\r\n\t\t\t: newValue; // just string or number...\r\n\t\tconst url = new URL(window.location.href);\r\n\t\tconst params = new URLSearchParams(url.search);\r\n\t\tparams.set(keyName, plainValue);\r\n\t\twindow.history.pushState('', '', `?${params.toString()}`);\r\n\t\twindow.dispatchEvent(new CustomEvent('popstate', { detail: { key: keyName, value: newValue } }));\r\n\t\tsetUrlValue(newValue);\r\n\t};\r\n\r\n\treturn [urlValue, onValueChange, isInit];\r\n};\r\n\r\nexport default usePureQueryCustomState;"],"names":["keyName","defaultValue","options","_a","useState","isInit","setInit","_b","urlValue","setUrlValue","useEffect","fn","e","mount","detail","key","url","URL","window","location","href","value","URLSearchParams","search","get","isValueObj","JSON","parse","parseFn","isNaN","Number","addEventListener","removeEventListener","newValue","plainValue","stringify","params","set","history","pushState","toString","dispatchEvent","CustomEvent"],"mappings":"mDAOgC,SAAIA,EAAiBC,EAAmBC,gBAAAA,MACjE,IAAAC,EAAoBC,YAAS,GAA5BC,OAAQC,OACTC,EAA0BH,WAASH,GAAlCO,OAAUC,OAEjBC,aAAU,WACT,IAAMC,EAAK,SAACC,EAASC,GAEpB,IAAID,GAAKA,EAAEE,OAAOC,MAAQf,EAA1B,CACA,GAAIa,EAAO,CACV,IAAMG,EAAM,IAAIC,IAAIC,OAAOC,SAASC,MAGhCC,EAFW,IAAIC,gBAAgBN,EAAIO,QACVC,IAAIxB,GAejC,OAbIqB,GAASnB,EAAQuB,WACpBJ,EAAQK,KAAKC,MAAMN,GACTA,GAASnB,EAAQ0B,QAC3BP,EAAQnB,EAAQ0B,QAAQP,GACbA,EAGAQ,MAAMR,KAEjBA,EAAQS,OAAOT,IAJfA,EAAQpB,EAMTQ,EAAYY,QACZf,GAAQ,GAGLM,EAAEE,OAAOO,QAAUb,GAAUC,EAAYG,EAAEE,OAAOO,SAIvD,OAFAV,EAAG,CAAEG,OAAQ,CAAEC,IAAKf,KAAa,GACjCkB,OAAOa,iBAAiB,WAAYpB,GAC7B,WACNO,OAAOc,oBAAoB,WAAYrB,MAEtC,IAcH,MAAO,CAACH,EAZc,SAACyB,GACtB,IAAMC,EAAahC,EAAQuB,WACvBC,KAAKS,UAAUF,GAChBA,EACGjB,EAAM,IAAIC,IAAIC,OAAOC,SAASC,MAC9BgB,EAAS,IAAId,gBAAgBN,EAAIO,QACvCa,EAAOC,IAAIrC,EAASkC,GACpBhB,OAAOoB,QAAQC,UAAU,GAAI,GAAI,IAAIH,EAAOI,YAC5CtB,OAAOuB,cAAc,IAAIC,YAAY,WAAY,CAAE5B,OAAQ,CAAEC,IAAKf,EAASqB,MAAOY,MAClFxB,EAAYwB,IAGoB5B"}